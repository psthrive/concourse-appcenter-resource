#!/usr/bin/env bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source=$1
if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>" >&2
  exit 1
fi

payload=$(mktemp /tmp/appcenter-artifact.XXXXXX)
echo $payload
cat > $payload <&0

export API_TOKEN=$(jq -r '.source.api_token // ""' < $payload)
export OWNER=$(jq -r '.source.owner // ""' < $payload)
export APP_NAME=$(jq -r '.source.app_name // ""' < $payload)

if [ -z "$API_TOKEN" ]; then
  echo "invalid payload (missing token)"
  exit 1
fi

if [ -z "$OWNER" ]; then
  echo "invalid payload (missing owner)"
  exit 1
fi

if [ -z "$APP_NAME" ]; then
  echo "invalid payload (missing app_name)"
  exit 1
fi

source $(dirname $0)/api.sh

path=$(jq -r '.params.path // ""' < $payload)
binary_name=$(jq --arg dn $app_name -r '.params.binary_name // $dn' < $payload)
release_notes=$(jq -r '.params.release_notes // ""' < $payload)

## release uploads
cd $source/$path

response=$(create_release_uploads)
url=$(echo $response | jq -r '.upload_url')

echo "file uploading..."
status=$(curl -w %{http_code} -F "ipa=@$binary_name" $url)

if [ $status -lt 200 ] || [ $status -gt 299 ]; then
  echo "api error: $(echo $response | jq -r '.message')"
  exit 1
fi

upload_id=$(echo $response | jq -r '.upload_id')
release_id=$(update_release_uploads_status $upload_id "committed" | jq -r '.release_id')
echo "Release ID: $release_id"

if [ -n "$release_notes" ]; then
  put_release_notes $release_id $release_notes
fi

## distribution
group_id=$(jq -r '.source.group_id // ""' < $payload)
email=$(jq -r '.source.email // ""' < $payload)
store_id=$(jq -r '.source.store_id // ""' < $payload)
mandatory_update=$(jq -r '.source.mandatory_update // false' < $payload)
notify_testers=$(jq -r '.source.notify_testers // false' < $payload)

if [ -n "$group_id" ]; then
  distribute_groups $release_id $group_id $mandatory_update $notify_testers
elif [ -n "$email" ]; then
  distribute_testers $release_id $email $mandatory_update $notify_testers
elif [ -n "$store_id" ]; then
  distribute_store $release_id $store_id
else
  echo "distribution skipped."
fi

printf '{"version":{}}' >&3